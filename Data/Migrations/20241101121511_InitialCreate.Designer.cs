// <auto-generated />
using System;
using CryptoTrade.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CryptoTrade.Data.Migrations
{
    [DbContext(typeof(CryptoTradeContext))]
    [Migration("20241101121511_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CryptoTrade.Models.Crypto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("AllTimeHigh")
                        .HasColumnType("float");

                    b.Property<double>("AllTimeLow")
                        .HasColumnType("float");

                    b.Property<double>("CirculatingSupply")
                        .HasColumnType("float");

                    b.Property<string>("Contract")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MarketCap")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Ranking")
                        .HasColumnType("int");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalSupply")
                        .HasColumnType("float");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cryptos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AllTimeHigh = 69000.0,
                            AllTimeLow = 67.0,
                            CirculatingSupply = 19000000.0,
                            Contract = "0x0000000000000000000000000000000000000000",
                            CreationDate = new DateTime(2009, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "La primera criptomoneda descentralizada",
                            MarketCap = "900B",
                            Name = "Bitcoin",
                            Ranking = 1,
                            Symbol = "BTC",
                            TotalSupply = 21000000.0,
                            Value = 60000.0,
                            Website = "https://bitcoin.org"
                        },
                        new
                        {
                            Id = 2,
                            AllTimeHigh = 4800.0,
                            AllTimeLow = 0.41999999999999998,
                            CirculatingSupply = 118000000.0,
                            Contract = "0x2170ed0880ac9a755fd29b2688956bd959f933f8",
                            CreationDate = new DateTime(2015, 7, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Una plataforma descentralizada de contratos inteligentes",
                            MarketCap = "400B",
                            Name = "Ethereum",
                            Ranking = 2,
                            Symbol = "ETH",
                            TotalSupply = 118000000.0,
                            Value = 4000.0,
                            Website = "https://ethereum.org"
                        },
                        new
                        {
                            Id = 3,
                            AllTimeHigh = 3.1000000000000001,
                            AllTimeLow = 0.017000000000000001,
                            CirculatingSupply = 32000000000.0,
                            Contract = "0x3ee2200efb3400fabb9aacf31297cbdd1d435d47",
                            CreationDate = new DateTime(2017, 9, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Plataforma blockchain de tercera generación",
                            MarketCap = "70B",
                            Name = "Cardano",
                            Ranking = 5,
                            Symbol = "ADA",
                            TotalSupply = 45000000000.0,
                            Value = 2.1499999999999999,
                            Website = "https://cardano.org"
                        });
                });

            modelBuilder.Entity("CryptoTrade.Models.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("CompanyValue")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("DividendYield")
                        .HasColumnType("float");

                    b.Property<double>("EarningPerShare")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Ranking")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Stocks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Technology",
                            CompanyValue = 2500000000000.0,
                            CreationDate = new DateTime(1976, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Empresa multinacional de tecnología",
                            DividendYield = 0.60999999999999999,
                            EarningPerShare = 5.6100000000000003,
                            Name = "Apple Inc.",
                            Ranking = 1,
                            Value = 150.25,
                            Website = "https://www.apple.com"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Technology",
                            CompanyValue = 2300000000000.0,
                            CreationDate = new DateTime(1975, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Empresa de software y hardware",
                            DividendYield = 0.87,
                            EarningPerShare = 9.7799999999999994,
                            Name = "Microsoft Corporation",
                            Ranking = 2,
                            Value = 300.55000000000001,
                            Website = "https://www.microsoft.com"
                        },
                        new
                        {
                            Id = 3,
                            Category = "Automotive",
                            CompanyValue = 800000000000.0,
                            CreationDate = new DateTime(2003, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Empresa de automóviles eléctricos y energías limpias",
                            DividendYield = 0.0,
                            EarningPerShare = 2.1600000000000001,
                            Name = "Tesla, Inc.",
                            Ranking = 3,
                            Value = 750.75,
                            Website = "https://www.tesla.com"
                        });
                });

            modelBuilder.Entity("CryptoTrade.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int?>("AssetId")
                        .HasColumnType("int");

                    b.Property<string>("Concept")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CryptoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StockId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CryptoId");

                    b.HasIndex("StockId");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 0.10000000000000001,
                            AssetId = 1,
                            Concept = "Compra de Bitcoin",
                            Date = new DateTime(2023, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = "Tarjeta de Crédito",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Amount = 1.5,
                            AssetId = 2,
                            Concept = "Compra de Ethereum",
                            Date = new DateTime(2023, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = "Transferencia Bancaria",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            Amount = 500.0,
                            AssetId = 3,
                            Concept = "Compra de Cardano",
                            Date = new DateTime(2023, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = "Tarjeta de Crédito",
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            Amount = 0.050000000000000003,
                            AssetId = 1,
                            Concept = "Venta de Bitcoin",
                            Date = new DateTime(2023, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = "Wallet",
                            UserId = 2
                        },
                        new
                        {
                            Id = 5,
                            Amount = 0.29999999999999999,
                            AssetId = 1,
                            Concept = "Compra de Bitcoin",
                            Date = new DateTime(2023, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = "Transferencia Bancaria",
                            UserId = 2
                        },
                        new
                        {
                            Id = 6,
                            Amount = 2.0,
                            AssetId = 2,
                            Concept = "Compra de Ethereum",
                            Date = new DateTime(2023, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = "Tarjeta de Crédito",
                            UserId = 3
                        },
                        new
                        {
                            Id = 7,
                            Amount = 1000.0,
                            AssetId = 3,
                            Concept = "Compra de Cardano",
                            Date = new DateTime(2023, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = "Wallet",
                            UserId = 3
                        },
                        new
                        {
                            Id = 8,
                            Amount = 500.0,
                            AssetId = 3,
                            Concept = "Venta de Cardano",
                            Date = new DateTime(2023, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = "Transferencia Bancaria",
                            UserId = 3
                        },
                        new
                        {
                            Id = 9,
                            Amount = 0.20000000000000001,
                            AssetId = 1,
                            Concept = "Compra de Bitcoin",
                            Date = new DateTime(2023, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = "Wallet",
                            UserId = 4
                        },
                        new
                        {
                            Id = 10,
                            Amount = 0.5,
                            AssetId = 2,
                            Concept = "Venta de Ethereum",
                            Date = new DateTime(2023, 7, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = "Tarjeta de Crédito",
                            UserId = 4
                        },
                        new
                        {
                            Id = 11,
                            Amount = 0.14999999999999999,
                            AssetId = 1,
                            Concept = "Compra de Bitcoin",
                            Date = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = "Transferencia Bancaria",
                            UserId = 4
                        },
                        new
                        {
                            Id = 12,
                            Amount = 10.0,
                            AssetId = 1,
                            Concept = "Compra de acciones de Apple",
                            Date = new DateTime(2023, 9, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = "Wallet",
                            UserId = 2
                        },
                        new
                        {
                            Id = 13,
                            Amount = 5.0,
                            AssetId = 2,
                            Concept = "Compra de acciones de Microsoft",
                            Date = new DateTime(2023, 8, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = "Tarjeta de Crédito",
                            UserId = 3
                        },
                        new
                        {
                            Id = 14,
                            Amount = 2.0,
                            AssetId = 3,
                            Concept = "Venta de acciones de Tesla",
                            Date = new DateTime(2023, 9, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = "Transferencia Bancaria",
                            UserId = 4
                        });
                });

            modelBuilder.Entity("CryptoTrade.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Cash")
                        .HasColumnType("float");

                    b.Property<string>("DNI")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Wallet")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Birthdate = new DateTime(2001, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Cash = 0.0,
                            DNI = "32452464D",
                            Email = "mario@gmail.com",
                            IsBanned = false,
                            Name = "Mario",
                            Nationality = "España",
                            Password = "mario12345",
                            Phone = "4574",
                            Role = "admin",
                            Wallet = 0.0
                        },
                        new
                        {
                            Id = 2,
                            Birthdate = new DateTime(2003, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Cash = 146.0,
                            DNI = "23523562D",
                            Email = "carlos@gmail.com",
                            IsBanned = false,
                            Name = "Carlos",
                            Nationality = "Argentina",
                            Password = "carlos12345",
                            Phone = "4567477",
                            Role = "user",
                            Wallet = 350.0
                        },
                        new
                        {
                            Id = 3,
                            Birthdate = new DateTime(2003, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Cash = 0.0,
                            DNI = "23526445X",
                            Email = "fernando@gmail.com",
                            IsBanned = false,
                            Name = "Fernando",
                            Nationality = "España",
                            Password = "fernando12345",
                            Phone = "4745",
                            Role = "user",
                            Wallet = 0.0
                        },
                        new
                        {
                            Id = 4,
                            Birthdate = new DateTime(2004, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Cash = 0.0,
                            DNI = "52353425D",
                            Email = "eduardo@gmail.com",
                            IsBanned = false,
                            Name = "Eduardo",
                            Nationality = "España",
                            Password = "eduardo12345",
                            Phone = "4574548",
                            Role = "user",
                            Wallet = 0.0
                        });
                });

            modelBuilder.Entity("CryptoTrade.Models.Transaction", b =>
                {
                    b.HasOne("CryptoTrade.Models.Crypto", "Crypto")
                        .WithMany()
                        .HasForeignKey("CryptoId");

                    b.HasOne("CryptoTrade.Models.Stock", "Stock")
                        .WithMany()
                        .HasForeignKey("StockId");

                    b.HasOne("CryptoTrade.Models.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crypto");

                    b.Navigation("Stock");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CryptoTrade.Models.User", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
