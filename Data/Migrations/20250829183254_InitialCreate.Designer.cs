// <auto-generated />
using System;
using CryptoTrade.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CryptoTrade.Data.Migrations
{
    [DbContext(typeof(CryptoTradeContext))]
    [Migration("20250829183254_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CryptoTrade.Models.Crypto", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("AllTimeHigh")
                        .HasColumnType("float");

                    b.Property<double?>("AllTimeHighChangePercentage")
                        .HasColumnType("float");

                    b.Property<DateTime?>("AllTimeHighDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("AllTimeLow")
                        .HasColumnType("float");

                    b.Property<double?>("AllTimeLowChangePercentage")
                        .HasColumnType("float");

                    b.Property<DateTime?>("AllTimeLowDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("CirculatingSupply")
                        .HasColumnType("float");

                    b.Property<double?>("FullyDilutedValuation")
                        .HasColumnType("float");

                    b.Property<double?>("High24h")
                        .HasColumnType("float");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Low24h")
                        .HasColumnType("float");

                    b.Property<double?>("MarketCap")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<double?>("MarketCapChange24h")
                        .HasColumnType("float");

                    b.Property<double?>("MarketCapChangePercentage24h")
                        .HasColumnType("float");

                    b.Property<double?>("MarketCapRank")
                        .HasColumnType("float");

                    b.Property<double?>("MaxSupply")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Price")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<double?>("PriceChange24h")
                        .HasColumnType("float");

                    b.Property<double?>("PriceChangePercentage1h")
                        .HasColumnType("float");

                    b.Property<double?>("PriceChangePercentage24h")
                        .HasColumnType("float");

                    b.Property<double?>("PriceChangePercentage7d")
                        .HasColumnType("float");

                    b.Property<string>("SparklineIn7d")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("TotalSupply")
                        .HasColumnType("float");

                    b.Property<double?>("TotalVolume")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Cryptos");
                });

            modelBuilder.Entity("CryptoTrade.Models.CryptoIndex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double?>("ChangePercentage")
                        .HasColumnType("float");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sentiment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("CryptoIndices");
                });

            modelBuilder.Entity("CryptoTrade.Models.CryptoTrending", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("ChangePercentage")
                        .HasColumnType("float");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Symbol")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CryptoTrendings");
                });

            modelBuilder.Entity("CryptoTrade.Models.Stock", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Ceo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Changes")
                        .HasColumnType("float");

                    b.Property<double?>("ChangesPercentage")
                        .HasColumnType("float");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Exchange")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExchangeShortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Industry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Isin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("LastAnnualDividend")
                        .HasColumnType("float");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<double?>("MarketCap")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<double?>("MarketCapRank")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Price")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<string>("Sector")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Volume")
                        .HasColumnType("float");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("CryptoTrade.Models.StockGainer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("ChangePercentage")
                        .HasColumnType("float");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Symbol")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StockGainers");
                });

            modelBuilder.Entity("CryptoTrade.Models.StockLoser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("ChangePercentage")
                        .HasColumnType("float");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Symbol")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StockLosers");
                });

            modelBuilder.Entity("CryptoTrade.Models.StockMostActive", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("ChangePercentage")
                        .HasColumnType("float");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Symbol")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StockMostActives");
                });

            modelBuilder.Entity("CryptoTrade.Models.StockTrending", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("ChangePercentage")
                        .HasColumnType("float");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Symbol")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StockTrendings");
                });

            modelBuilder.Entity("CryptoTrade.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<double?>("AssetAmount")
                        .HasColumnType("float");

                    b.Property<string>("AssetId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Concept")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CryptoId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<double?>("PurchasePrice")
                        .HasColumnType("float");

                    b.Property<string>("StockId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TypeOfAsset")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CryptoId");

                    b.HasIndex("StockId");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 5000.0,
                            Concept = "+ Deposit",
                            Date = new DateTime(2024, 1, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = 1,
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            Amount = 109.44,
                            AssetAmount = 0.0048780000000000004,
                            AssetId = "bitcoin",
                            Concept = "+ Bitcoin",
                            Date = new DateTime(2024, 1, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PurchasePrice = 22436.130000000001,
                            TypeOfAsset = "Crypto",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            Amount = 218.88999999999999,
                            AssetAmount = 0.0076920000000000001,
                            AssetId = "bitcoin",
                            Concept = "+ Bitcoin",
                            Date = new DateTime(2024, 1, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PurchasePrice = 28455.57,
                            TypeOfAsset = "Crypto",
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            Amount = 54.719999999999999,
                            AssetAmount = 0.001196,
                            AssetId = "bitcoin",
                            Concept = "+ Bitcoin",
                            Date = new DateTime(2024, 1, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PurchasePrice = 45749.959999999999,
                            TypeOfAsset = "Crypto",
                            UserId = 2
                        },
                        new
                        {
                            Id = 5,
                            Amount = 54.719999999999999,
                            AssetAmount = 0.001276,
                            AssetId = "bitcoin",
                            Concept = "+ Bitcoin",
                            Date = new DateTime(2024, 1, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PurchasePrice = 42904.269999999997,
                            TypeOfAsset = "Crypto",
                            UserId = 2
                        },
                        new
                        {
                            Id = 6,
                            Amount = 109.45999999999999,
                            AssetAmount = 0.0024940000000000001,
                            AssetId = "bitcoin",
                            Concept = "+ Bitcoin",
                            Date = new DateTime(2024, 1, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PurchasePrice = 43891.480000000003,
                            TypeOfAsset = "Crypto",
                            UserId = 2
                        },
                        new
                        {
                            Id = 7,
                            Amount = 654.37,
                            AssetAmount = 7331.1300000000001,
                            AssetId = "hedera-hashgraph",
                            Concept = "+ Hedera",
                            Date = new DateTime(2024, 2, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PurchasePrice = 0.089260000000000006,
                            TypeOfAsset = "Crypto",
                            UserId = 2
                        },
                        new
                        {
                            Id = 8,
                            Amount = 529.36000000000001,
                            AssetAmount = 1172.51,
                            AssetId = "cardano",
                            Concept = "+ Cardano",
                            Date = new DateTime(2024, 2, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PurchasePrice = 0.45140000000000002,
                            TypeOfAsset = "Crypto",
                            UserId = 2
                        },
                        new
                        {
                            Id = 9,
                            Amount = 322.91000000000003,
                            AssetAmount = 534.22000000000003,
                            AssetId = "ripple",
                            Concept = "+ XRP",
                            Date = new DateTime(2024, 2, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PurchasePrice = 0.60450000000000004,
                            TypeOfAsset = "Crypto",
                            UserId = 2
                        },
                        new
                        {
                            Id = 10,
                            Amount = 203.19999999999999,
                            AssetAmount = 263.00999999999999,
                            AssetId = "ondo-finance",
                            Concept = "+ Ondo",
                            Date = new DateTime(2024, 5, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PurchasePrice = 0.77259999999999995,
                            TypeOfAsset = "Crypto",
                            UserId = 2
                        },
                        new
                        {
                            Id = 11,
                            Amount = 507.43000000000001,
                            AssetAmount = 0.2175,
                            AssetId = "ethereum",
                            Concept = "+ Ethereum",
                            Date = new DateTime(2024, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PurchasePrice = 2332.9200000000001,
                            TypeOfAsset = "Crypto",
                            UserId = 2
                        },
                        new
                        {
                            Id = 12,
                            Amount = 229.09,
                            AssetAmount = 35.700000000000003,
                            AssetId = "polkadot",
                            Concept = "+ Polkadot",
                            Date = new DateTime(2024, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PurchasePrice = 6.4169999999999998,
                            TypeOfAsset = "Crypto",
                            UserId = 2
                        },
                        new
                        {
                            Id = 13,
                            Amount = 195.47,
                            AssetAmount = 30.460000000000001,
                            AssetId = "polkadot",
                            Concept = "+ Polkadot",
                            Date = new DateTime(2024, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PurchasePrice = 6.4169999999999998,
                            TypeOfAsset = "Crypto",
                            UserId = 2
                        },
                        new
                        {
                            Id = 14,
                            Amount = 157.43000000000001,
                            AssetAmount = 23400000.0,
                            AssetId = "pepe",
                            Concept = "+ Pepe",
                            Date = new DateTime(2024, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PurchasePrice = 6.72E-06,
                            TypeOfAsset = "Crypto",
                            UserId = 2
                        },
                        new
                        {
                            Id = 15,
                            Amount = 200.00999999999999,
                            AssetAmount = 25.899999999999999,
                            AssetId = "near",
                            Concept = "+ NEAR Protocol",
                            Date = new DateTime(2024, 12, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PurchasePrice = 7.7210999999999999,
                            TypeOfAsset = "Crypto",
                            UserId = 2
                        },
                        new
                        {
                            Id = 16,
                            Amount = 309.94,
                            AssetAmount = 62.939999999999998,
                            AssetId = "near",
                            Concept = "+ NEAR Protocol",
                            Date = new DateTime(2025, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PurchasePrice = 4.9240000000000004,
                            TypeOfAsset = "Crypto",
                            UserId = 2
                        },
                        new
                        {
                            Id = 17,
                            Amount = 309.31999999999999,
                            AssetAmount = 44.939999999999998,
                            AssetId = "render-token",
                            Concept = "+ Render",
                            Date = new DateTime(2025, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PurchasePrice = 6.883,
                            TypeOfAsset = "Crypto",
                            UserId = 2
                        },
                        new
                        {
                            Id = 18,
                            Amount = 99.890000000000001,
                            AssetAmount = 23.989999999999998,
                            AssetId = "render-token",
                            Concept = "+ Render",
                            Date = new DateTime(2025, 2, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PurchasePrice = 4.1639999999999997,
                            TypeOfAsset = "Crypto",
                            UserId = 2
                        },
                        new
                        {
                            Id = 19,
                            Amount = 100.0,
                            AssetAmount = 0.3125,
                            AssetId = "msft",
                            Concept = "+ Microsoft Corporation",
                            Date = new DateTime(2025, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PurchasePrice = 320.0,
                            TypeOfAsset = "Stock",
                            UserId = 2
                        },
                        new
                        {
                            Id = 20,
                            Amount = 250.0,
                            AssetAmount = 2.0830000000000002,
                            AssetId = "nvda",
                            Concept = "+ NVIDIA Corporation",
                            Date = new DateTime(2025, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PurchasePrice = 120.0,
                            TypeOfAsset = "Stock",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("CryptoTrade.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Cash")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DNI")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("LastBalance")
                        .HasColumnType("float");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Profit")
                        .HasColumnType("float");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Wallet")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Birthdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Cash = 0.0,
                            CreationDate = new DateTime(2016, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DNI = "Admin",
                            Email = "admin@cryptotrade.com",
                            LastBalance = 0.0,
                            LastUpdated = new DateTime(2025, 8, 29, 20, 32, 54, 74, DateTimeKind.Utc).AddTicks(5915),
                            Name = "Admin",
                            Nationality = "Admin",
                            Password = "YHrp/ExR53lRO6ouA2tT0y9QCb94jfjNBsxcGq5x798=",
                            Phone = "000",
                            Profit = 0.0,
                            Role = "admin",
                            Wallet = 0.0
                        },
                        new
                        {
                            Id = 2,
                            Birthdate = new DateTime(2001, 9, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Cash = 384.35000000000002,
                            CreationDate = new DateTime(2022, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DNI = "25463652D",
                            Email = "mario@gmail.com",
                            LastBalance = 0.0,
                            LastUpdated = new DateTime(2025, 8, 29, 20, 32, 54, 74, DateTimeKind.Utc).AddTicks(5921),
                            Name = "Mario",
                            Nationality = "España",
                            Password = "JApd9lfG2wshq3agTXjgwVT/f4jQecLCYTBnBT30AqE=",
                            Phone = "567935418",
                            Profit = 0.0,
                            Role = "user",
                            Wallet = 4615.6499999999996
                        },
                        new
                        {
                            Id = 3,
                            Birthdate = new DateTime(2003, 1, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Cash = 0.0,
                            CreationDate = new DateTime(2023, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DNI = "26587463X",
                            Email = "fernando@gmail.com",
                            LastBalance = 0.0,
                            LastUpdated = new DateTime(2025, 8, 29, 20, 32, 54, 74, DateTimeKind.Utc).AddTicks(5923),
                            Name = "Fernando",
                            Nationality = "España",
                            Password = "xf0cyil3yRNj5rC2KE+3O+wmt/rGtUapwYkq5YfkqG4=",
                            Phone = "541298637",
                            Profit = 0.0,
                            Role = "user",
                            Wallet = 0.0
                        },
                        new
                        {
                            Id = 4,
                            Birthdate = new DateTime(1998, 11, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Cash = 0.0,
                            CreationDate = new DateTime(2024, 1, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DNI = "52684659D",
                            Email = "eduardo@gmail.com",
                            LastBalance = 0.0,
                            LastUpdated = new DateTime(2025, 8, 29, 20, 32, 54, 74, DateTimeKind.Utc).AddTicks(5924),
                            Name = "Eduardo",
                            Nationality = "España",
                            Password = "6GGegrjO3tQMHPZBrkdANTfPC92ka20ChXH9VdvhLak=",
                            Phone = "658248974",
                            Profit = 0.0,
                            Role = "user",
                            Wallet = 0.0
                        });
                });

            modelBuilder.Entity("CryptoTrade.Models.Watchlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AssetId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeAsset")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Watchlists");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssetId = "bitcoin",
                            TypeAsset = "Crypto",
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            AssetId = "ethereum",
                            TypeAsset = "Crypto",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            AssetId = "ripple",
                            TypeAsset = "Crypto",
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            AssetId = "cardano",
                            TypeAsset = "Crypto",
                            UserId = 2
                        },
                        new
                        {
                            Id = 5,
                            AssetId = "aapl",
                            TypeAsset = "Stock",
                            UserId = 2
                        },
                        new
                        {
                            Id = 6,
                            AssetId = "amzn",
                            TypeAsset = "Stock",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("CryptoTrade.Models.Transaction", b =>
                {
                    b.HasOne("CryptoTrade.Models.Crypto", "Crypto")
                        .WithMany()
                        .HasForeignKey("CryptoId");

                    b.HasOne("CryptoTrade.Models.Stock", "Stock")
                        .WithMany()
                        .HasForeignKey("StockId");

                    b.HasOne("CryptoTrade.Models.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crypto");

                    b.Navigation("Stock");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CryptoTrade.Models.User", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
